#!/bin/bash
AMBER='\033[0;33m'
NC='\033[0m'

showUsage () {
    printf "\nUsage:\n"
    printf "\nRun as sudo (${AMBER}sudo update${NC}).\n"
    printf "The apt cache will be updated and you'll see a list of any package(s) that can be upgraded, and you can view details or the changelog of any package(s), and can upgrade individual package(s) or perform an \`apt full-upgrade\` or \`apt upgrade\`.\n"
    printf "\nAdd an \"f\" switch to run \`apt full-upgrade\` without prompts (${AMBER}sudo update f${NC}).\n"
    printf "\nAdd a \"u\" switch to run \`apt upgrade\` without prompts (${AMBER}sudo update u${NC}).\n\n"
}

if [ $# -gt 0 ]
then
    case $1 in
        [fF] ) printf "\nRunning Full-upgrade\n\n"; apt -y full-upgrade; printf "\n"; exit;;
        [uU] ) printf "\nRunning Upgrade\n\n"; apt -y upgrade; printf "\n"; exit;;
        g ) showUsage; exit;;
        * ) showUsage; exit;;
    esac
fi

printf "\n${AMBER}Updating Database...${NC}\n\n"
apt update

s=$(apt list --upgradable 2>/dev/null | sed -n '2,999p' | sed 's/\/.*//')
t=$(echo $s | sed ':a;N;$!ba;s/\n/ /g')
IFS=' ' read -ra fileList <<< "$t"

showMenu () {
#    printf "\n\n"
    printf "\n${AMBER}Upgradable Packages:${NC}\n\n"
    for i in "${!fileList[@]}"
    do
        printf "[${AMBER}%s${NC}] %s\n" "${a[$(( $i + 1 ))]}$(( $i + 1 ))" "${fileList[$i]}"
    done
    printf "[${AMBER}F${NC}]ull-upgrade\n"
    printf "[${AMBER}U${NC}]pgrade\n"
    printf "[${AMBER}S${NC}]how this list of upgradable packages\n"
    printf "E[${AMBER}x${NC}]it\n\n"
}

showHelp () {
    printf "\nEnter a ${AMBER}package #${NC} to show details of that package."
    printf "\nEnter ${AMBER}\"c\" followed by a package #${NC} to see that package's changelog (e.g., c3)."
    printf "\nEnter ${AMBER}\"u\" followed by a package #${NC} to upgrade that specific package (e.g, u12)."
    printf "\nEnter ${AMBER}\"f\"${NC} to perform \`apt full-upgrade\` (all upgradable packages)."
    printf "\nEnter ${AMBER}\"u\"${NC} to perform \`apt upgrade\` (all upgradable packages)."
    printf "\nEnter ${AMBER}\"s\"${NC} to view the list of upgradable packages."
    printf "\nEnter ${AMBER}\"x\"${NC} to exit.\n\n"
}

timeout () {
    printf "\n\n${AMBER}Not there? I'll exit now.${NC}\n\n"
    exit;
}

if [ "${#fileList[@]}" == 0 ]
then
    printf "\n${AMBER}You're already up to date!${NC}\n\n"
    sleep 1
    exit
fi

showMenu

while true; do
    printf "${AMBER}Your choice?${NC} "
	read -e -t 30 -n 4 opt
	[ -z "$opt" ] && timeout
    case $opt in
		[0-9]* ) apt-cache show --no-all-versions ${fileList[(( $opt - 1 ))]}; sleep 1s; showMenu;;
        [Cc][0-9]* ) apt-get changelog ${fileList[$(( "${opt//c/}" - 1 ))]}; sleep 1s; showMenu;;
		[Uu][0-9]* ) printf "\nUpgrading ${fileList[$(( ${opt//u/} - 1 ))]}\n\n"; apt upgrade ${fileList[$(( "${opt//u/}" - 1 ))]}; showMenu;;
		[Ff] ) printf "\nRunning Full-upgrade\n\n"; apt full-upgrade; break;;
		[Uu] ) printf "\nRunning Upgrade\n\n"; apt upgrade; break;;
        [Ss] ) showMenu;;
		[Xx] ) printf "\nSee ya!\n\n"; exit;;
		* ) showHelp;;
	esac
done
